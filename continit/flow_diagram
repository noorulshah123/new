════════════════════════════════════════════════════════════════════════
                    CONTAINER LIFECYCLE FLOW
════════════════════════════════════════════════════════════════════════

1️⃣ INITIALIZATION PHASE
═══════════════════════════════════════════════════════════════════════
Config: pre-init-seats: 3, min-seats: 1, max-seats-per-container: 2

┌──────────────────────────────────────────────────────────┐
│ ShinyProxy Starts                                        │
│ Reads: container-pre-initialization-seats = 3            │
└─────────────────┬────────────────────────────────────────┘
                  ▼
        ┌─────────────────┐
        │ Start Container 1│ → State: PRE_INIT (0/2 users)
        └─────────────────┘    ENV: PRE_INIT_MODE=true
                  │
        ┌─────────────────┐
        │ Start Container 2│ → State: PRE_INIT (0/2 users)
        └─────────────────┘    No HTTP headers yet
                  │
        ┌─────────────────┐
        │ Start Container 3│ → State: PRE_INIT (0/2 users)
        └─────────────────┘    Waiting for users

POOL STATUS: [C1(empty), C2(empty), C3(empty)]
═══════════════════════════════════════════════════════════════════════

2️⃣ USER ARRIVAL PHASE
═══════════════════════════════════════════════════════════════════════

USER 1 ARRIVES (t=0s)
────────────────────
Request → ShinyProxy → Check Pool → C1 Available
                                  ↓
                        Assign User1 to C1
                                  ↓
                    Inject Headers to C1:
                    X-SP-UserId: user1
                    X-SP-UserGroups: analysts
                                  ↓
                    C1: PRE_INIT → ASSIGNED (1/2)
                    
POOL: [C2(0/2), C3(0/2)]  ACTIVE: [C1(user1)]

USER 2 ARRIVES (t=5s) 
────────────────────
Request → ShinyProxy → Check Active Containers
                             ↓
                    C1 has space (1/2)!
                             ↓
                    Assign User2 to C1
                             ↓
                    C1: ASSIGNED (2/2) FULL!
                    
POOL: [C2(0/2), C3(0/2)]  ACTIVE: [C1(user1,user2)]

USER 3 ARRIVES (t=10s)
─────────────────────
Request → ShinyProxy → C1 Full → Use C2 from pool
                                        ↓
                              Assign User3 to C2
                                        ↓
                              C2: PRE_INIT → ASSIGNED (1/2)
                              
POOL: [C3(0/2)]  ACTIVE: [C1(user1,user2), C2(user3)]
        ↓
Check: Pool size (1) = min-seats (1) ✓ No action needed

USER 4 ARRIVES (t=15s)
─────────────────────
Request → ShinyProxy → C2 has space (1/2)
                             ↓
                    Assign User4 to C2
                             ↓
                    C2: ASSIGNED (2/2) FULL!
                    
POOL: [C3(0/2)]  ACTIVE: [C1(user1,user2), C2(user3,user4)]

═══════════════════════════════════════════════════════════════════════

3️⃣ APPROACHING LIMITS
═══════════════════════════════════════════════════════════════════════

USER 5 ARRIVES (t=20s)
─────────────────────
Request → Check: C1(FULL), C2(FULL) → Use C3 from pool
                                            ↓
                                  Assign User5 to C3
                                            ↓
                                  C3: ASSIGNED (1/2)
                                            
POOL: [EMPTY]  ACTIVE: [C1(2/2), C2(2/2), C3(1/2)]
      ⚠️
      ↓
Pool < min-seats! → Start new container C4
                           ↓
                    C4: PRE_INIT (0/2)
                    
POOL: [C4(0/2)]  ACTIVE: [C1(2/2), C2(2/2), C3(1/2)]

═══════════════════════════════════════════════════════════════════════

4️⃣ LIMIT SCENARIOS
═══════════════════════════════════════════════════════════════════════

SCENARIO A: All Containers Full
────────────────────────────────
State: C1(2/2), C2(2/2), C3(2/2), C4(2/2)
       All 8 seats occupied!

USER 9 ARRIVES:
Request → No space in active → No pool available
                ↓
        Check ECS limits
                ↓
    Can start new container?
         /            \
       YES             NO
        ↓              ↓
  Start C5(0/2)    ERROR: "No resources"
  Assign User9     User waits or retries


SCENARIO B: ECS Task Limit Reached
───────────────────────────────────
ECS Service: maxTasks = 10
Current: 10 containers running

USER N+1 ARRIVES:
Request → Need new container → Check ECS capacity
                                      ↓
                              Limit reached (10/10)
                                      ↓
                              Return 503 Error
                                      ↓
                        "Application temporarily unavailable"


SCENARIO C: User Disconnection & Recycling
───────────────────────────────────────────
Initial: C1(user1,user2), C2(user3,user4), C3(user5)

USER2 DISCONNECTS:
C1(user1,user2) → Remove user2 → C1(user1) [1/2]
                                      ↓
                              C1 now has space!

USER6 ARRIVES:
Request → C1 has space (1/2) → Assign to C1
                                     ↓
                            C1(user1,user6) [2/2]

═══════════════════════════════════════════════════════════════════════

5️⃣ SCALING DECISION TREE
═══════════════════════════════════════════════════════════════════════

                    [User Request]
                          │
                          ▼
                ┌─────────────────┐
                │ Check Active     │
                │ Containers       │
                └────────┬─────────┘
                         │
            ┌────────────┴────────────┐
            │                         │
        Space Available           All Full
            │                         │
            ▼                         ▼
    ┌───────────────┐        ┌──────────────┐
    │ Assign to     │        │ Check Pool   │
    │ Container     │        └──────┬───────┘
    │ with Space    │                │
    └───────────────┘      ┌─────────┴──────────┐
                          │                     │
                    Pool Available          Pool Empty
                          │                     │
                          ▼                     ▼
                ┌──────────────┐     ┌──────────────────┐
                │ Use Pool     │     │ Check ECS        │
                │ Container    │     │ Capacity         │
                └──────┬───────┘     └────────┬─────────┘
                       │                       │
                       ▼              ┌────────┴────────┐
                ┌──────────────┐      │                 │
                │ Check Min    │   Can Start        At Limit
                │ Seats        │      │                 │
                └──────┬───────┘      ▼                 ▼
                       │         ┌──────────┐    ┌──────────┐
              Need more?         │ Start    │    │ Return   │
                  │              │ New      │    │ Error    │
                  ▼              └──────────┘    └──────────┘
            ┌──────────┐
            │ Start    │
            │ Container│
            └──────────┘

═══════════════════════════════════════════════════════════════════════

6️⃣ REAL-TIME MONITORING VIEW
═══════════════════════════════════════════════════════════════════════

Time: 14:35:22
─────────────────────────────────────────────────────────────
Container ID    State      Users         Capacity   CPU   Memory
─────────────────────────────────────────────────────────────
C1-abc123      ASSIGNED   user1,user2   2/2 🔴     45%   1.2GB
C2-def456      ASSIGNED   user3         1/2 🟡     22%   0.8GB
C3-ghi789      PRE_INIT   -             0/2 🟢     5%    0.3GB
C4-jkl012      ASSIGNED   user4,user5   2/2 🔴     48%   1.3GB
C5-mno345      PRE_INIT   -             0/2 🟢     5%    0.3GB
─────────────────────────────────────────────────────────────

SUMMARY:
- Total Containers: 5
- Active Users: 5
- Available Seats: 3
- Pool Size: 2
- Status: ✅ HEALTHY

═══════════════════════════════════════════════════════════════════════
