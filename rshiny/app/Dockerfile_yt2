# Use Ubuntu 24.04 as base image
FROM ubuntu:24.04

# Set environment variables to prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Set Snowflake versions
ARG SNOWFLAKE_VERSION="2.25.9"
ARG SNOWFLAKE_FILE="snowflake_linux_x8664_odbc-${SNOWFLAKE_VERSION}.tgz"
ARG SF_JDBC_VERSION="3.13.34"
ARG SF_JDBC_FILE="snowflake-jdbc-${SF_JDBC_VERSION}.jar"

# Set Python version for consistency
ARG PYTHON_VERSION="3.9.5"

# Update and install base dependencies first
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    wget \
    gnupg \
    gnupg2 \
    software-properties-common \
    lsb-release \
    locales \
    sudo \
    && rm -rf /var/lib/apt/lists/*

# Configure locale (from Rocker)
RUN echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen \
    && locale-gen en_US.utf8 \
    && /usr/sbin/update-locale LANG=en_US.UTF-8

ENV LC_ALL=en_US.UTF-8
ENV LANG=en_US.UTF-8

# Add R repository and key (following Rocker approach)
RUN wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \
    && add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/"

# Install all dependencies in one layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Development tools
    build-essential \
    gfortran \
    g++ \
    gcc \
    make \
    cmake \
    # System libraries for Python compilation
    libbz2-dev \
    libffi-dev \
    liblzma-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    llvm \
    tk-dev \
    xz-utils \
    zlib1g-dev \
    # Graphics libraries
    libfreetype6-dev \
    libpng-dev \
    libjpeg-dev \
    libxml2-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    libfontconfig1-dev \
    # Network and SSL libraries
    libcurl4-openssl-dev \
    libgit2-dev \
    # Database connectivity
    unixodbc \
    unixodbc-dev \
    r-cran-rodbc \
    # R and related (following Rocker pattern)
    r-base \
    r-base-dev \
    r-base-core \
    r-recommended \
    littler \
    r-cran-docopt \
    # Python dependencies
    python3-dev \
    python3-pip \
    python3-venv \
    python3-setuptools \
    python3-wheel \
    # Java
    openjdk-11-jdk \
    # GDAL
    gdal-bin \
    libgdal-dev \
    # Other utilities
    gdebi-core \
    unzip \
    netcat-openbsd \
    git \
    ed \
    vim-tiny \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create R site-library directory with proper permissions (from Rocker)
RUN mkdir -p /usr/local/lib/R/site-library \
    && chown root:staff /usr/local/lib/R/site-library \
    && chmod g+ws /usr/local/lib/R/site-library

# Create littler links (from Rocker)
RUN ln -s /usr/lib/R/site-library/littler/examples/install.r /usr/local/bin/install.r \
    && ln -s /usr/lib/R/site-library/littler/examples/install2.r /usr/local/bin/install2.r \
    && ln -s /usr/lib/R/site-library/littler/examples/installBioc.r /usr/local/bin/installBioc.r \
    && ln -s /usr/lib/R/site-library/littler/examples/installDeps.r /usr/local/bin/installDeps.r \
    && ln -s /usr/lib/R/site-library/littler/examples/installGithub.r /usr/local/bin/installGithub.r \
    && ln -s /usr/lib/R/site-library/littler/examples/testInstalled.r /usr/local/bin/testInstalled.r \
    && ln -s /usr/lib/R/site-library/littler/examples/update.r /usr/local/bin/update.r

# Set default CRAN mirror (from Rocker)
RUN echo "options(repos = c(CRAN = 'https://cran.rstudio.com/'), download.file.method = 'libcurl')" >> /usr/lib/R/etc/Rprofile.site

# Add cloudguard certificate
ADD cloudguard-root.crt /usr/local/share/ca-certificates/cloudguard-root.crt
RUN chmod 644 /usr/local/share/ca-certificates/cloudguard-root.crt \
    && update-ca-certificates

# Download and install Shiny Server
RUN wget https://download3.rstudio.org/ubuntu-18.04/x86_64/shiny-server-1.5.21.1012-amd64.deb \
    && gdebi -n shiny-server-1.5.21.1012-amd64.deb \
    && rm shiny-server-1.5.21.1012-amd64.deb

# Install AWS CLI v2
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli2.zip" \
    && unzip awscli2.zip \
    && ./aws/install \
    && rm -rf awscli2.zip aws

# Install Python from source with shared library support (CRITICAL for reticulate)
WORKDIR /usr/src
RUN wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \
    && tar -xzf Python-${PYTHON_VERSION}.tgz \
    && cd Python-${PYTHON_VERSION} \
    && ./configure --enable-optimizations --enable-shared --prefix=/usr/local \
    && make -j $(nproc) \
    && make altinstall \
    && cd .. \
    && rm -rf Python-${PYTHON_VERSION} Python-${PYTHON_VERSION}.tgz

# Update shared library cache
RUN echo "/usr/local/lib" >> /etc/ld.so.conf.d/python.conf \
    && ldconfig

# Create symbolic links for Python
RUN ln -sf /usr/local/bin/python3.9 /usr/bin/python \
    && ln -sf /usr/local/bin/python3.9 /usr/bin/python3 \
    && ln -sf /usr/local/bin/pip3.9 /usr/bin/pip \
    && ln -sf /usr/local/bin/pip3.9 /usr/bin/pip3

# Verify Python installation
RUN python --version && echo "Python ${PYTHON_VERSION} installed successfully!"

# Create and activate virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
ENV VIRTUAL_ENV="/opt/venv"

# Set Python environment variables for R
ENV RETICULATE_PYTHON="/opt/venv/bin/python"
ENV LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"

# Install Python packages
COPY pip.conf /etc/pip.conf
RUN chmod 644 /etc/pip.conf
RUN pip install --upgrade pip setuptools wheel \
    && pip install certifi numpy pandas \
    && pip install --no-cache-dir bhp-sagemaker==2.2.10 \
    && pip install msal

# Configure Java for R
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
RUN R CMD javareconf

# Install Snowflake ODBC driver
RUN mkdir -p /usr/lib/snowflake && cd /usr/lib/snowflake \
    && curl -k -L "https://sfc-repo.snowflakecomputing.com/odbc/linux/${SNOWFLAKE_VERSION}/${SNOWFLAKE_FILE}" -o "${SNOWFLAKE_FILE}" \
    && if [ ! -e "${SNOWFLAKE_FILE}" ]; then echo "Error: Snowflake ODBC driver not downloaded!"; exit 1; fi \
    && tar xf ${SNOWFLAKE_FILE} \
    && mv snowflake_odbc odbc \
    && ./odbc/unixodbc_setup.sh \
    && rm -f ${SNOWFLAKE_FILE} \
    && sed -i "s/ODBCInstLib=\/usr\/lib64\/libodbcinst.so/ODBCInstLib=\/usr\/lib\/x86_64-linux-gnu\/libodbcinst.so.2/g" /usr/lib/snowflake/odbc/lib/simba.snowflake.ini

# Copy ODBC configuration
COPY app-runtime/artifacts/odbc.ini /etc/odbc.ini

# Install Snowflake JDBC driver
RUN mkdir -p /usr/lib/snowflake/jdbc && cd /usr/lib/snowflake/jdbc \
    && curl -L "https://repo1.maven.org/maven2/net/snowflake/snowflake-jdbc/${SF_JDBC_VERSION}/${SF_JDBC_FILE}" -o "${SF_JDBC_FILE}"

# Install R packages using littler (following Rocker pattern)
RUN install2.r --error --skipinstalled --deps TRUE \
    devtools \
    bslib \
    shiny \
    shinyWidgets \
    shinydashboard \
    shinycssloaders \
    shinylogs \
    stringr \
    tidyr \
    utils \
    uuid \
    withr \
    htmltools \
    httr \
    jsonlite \
    lubridate \
    odbc \
    openxlsx \
    plotly \
    purrr \
    R.utils \
    reshape2 \
    reticulate \
    rhandsontable \
    RJDBC \
    RODBC \
    readr \
    DT \
    sass \
    && rm -rf /tmp/downloaded_packages/

# Test Python-R integration
RUN R -e "library(reticulate); py_config(); py_available()"

# Create shiny user if not exists
RUN if ! id -u shiny > /dev/null 2>&1; then \
        useradd -r -m -d /home/shiny -s /bin/bash shiny; \
    fi

# Add shiny user to staff group (following Rocker pattern)
RUN usermod -a -G staff shiny

# Create ALL necessary directories with proper structure
RUN mkdir -p /var/lib/shiny-server/bookmarks \
    && mkdir -p /var/log/shiny-server \
    && mkdir -p /srv/shiny-server/app \
    && mkdir -p /var/run/shiny-server \
    && mkdir -p /tmp/shiny-server \
    && mkdir -p /etc/shiny-server \
    && mkdir -p /home/shiny/.config \
    && mkdir -p /home/shiny/.local \
    && mkdir -p /home/shiny/.cache \
    && mkdir -p /home/shiny/R/library

# Set ownership for all directories
RUN chown -R shiny:shiny /var/lib/shiny-server \
    && chown -R shiny:shiny /var/log/shiny-server \
    && chown -R shiny:shiny /srv/shiny-server \
    && chown -R shiny:shiny /var/run/shiny-server \
    && chown -R shiny:shiny /tmp/shiny-server \
    && chown -R shiny:shiny /home/shiny \
    && chown shiny:shiny /etc/shiny-server

# Set proper permissions
RUN chmod -R 755 /var/lib/shiny-server \
    && chmod -R 755 /var/log/shiny-server \
    && chmod -R 755 /srv/shiny-server \
    && chmod -R 755 /var/run/shiny-server \
    && chmod -R 755 /tmp/shiny-server \
    && chmod 755 /home/shiny

# Create optimized shiny-server configuration
RUN echo 'run_as shiny;\n\
\n\
server {\n\
  listen 3838;\n\
  \n\
  location / {\n\
    site_dir /srv/shiny-server/app;\n\
    log_dir /var/log/shiny-server;\n\
    directory_index on;\n\
    bookmark_state_dir /var/lib/shiny-server/bookmarks;\n\
    # Increased timeouts for better stability\n\
    app_init_timeout 60;\n\
    app_idle_timeout 0;\n\
  }\n\
}\n\
\n\
# Preserve logs\n\
preserve_logs true;\n\
\n\
# Sanitize errors\n\
sanitize_errors true;' > /etc/shiny-server/shiny-server.conf

# Copy JDBC configuration with proper ownership
COPY --chown=shiny:shiny app-runtime/artifacts/jdbc.ini /home/shiny/jdbc.ini
RUN chmod 644 /home/shiny/jdbc.ini

# Copy entrypoint script
COPY app-runtime-rshiny/shiny-server.sh /srv/shiny-server/app/shiny-server.sh
RUN chmod +x /srv/shiny-server/app/shiny-server.sh \
    && chown shiny:shiny /srv/shiny-server/app/shiny-server.sh

# Create symbolic links
RUN ln -s /var/log/shiny-server /srv/shiny-server/logs \
    && ln -s /home/shiny /srv/shiny-server/home \
    && ln -s /etc/shiny-server /srv/shiny-server/etc

# Set up R environment for shiny user
RUN echo "TMPDIR=/tmp/shiny-server" > /home/shiny/.Renviron \
    && echo "R_LIBS_USER=/home/shiny/R/library" >> /home/shiny/.Renviron \
    && echo "RETICULATE_PYTHON=/opt/venv/bin/python" >> /home/shiny/.Renviron \
    && echo "LD_LIBRARY_PATH=/usr/local/lib" >> /home/shiny/.Renviron \
    && chown shiny:shiny /home/shiny/.Renviron

# Expose Shiny Server port
EXPOSE 3838

# Switch to shiny user
USER shiny

# Set environment variables
ENV SHINY_LOG_STDERR=1
ENV SHINY_LOG_LEVEL=TRACE

# Set working directory
WORKDIR /srv/shiny-server/app

# Create .Renviron in working directory
RUN touch .Renviron

# Run the entrypoint script
CMD ["bash", "/srv/shiny-server/app/shiny-server.sh"]
